1. Расскажите об основных НТТР-методах.
2. Какой порядок реализации добавления данных в веб-приложение?
3. Какой механизм работы Spring MVC при добавления данных в веб-приложение?
4. Для чего используется класс с аннотаией @Service?

1. **Основные HTTP-методы:**
   - **GET**: Используется для запроса данных с сервера. Безопасен и идемпотентен, так как не изменяет состояние сервера.
   - **POST**: Используется для отправки данных на сервер для создания нового ресурса. Этот метод не идемпотентен, так как может приводить к изменению состояния сервера при каждом запросе.
   - **PUT**: Отправляет данные на сервер для обновления ресурса. Метод идемпотентен — повторный запрос приведет к одному и тому же результату.
   - **DELETE**: Удаляет ресурс на сервере. Идемпотентен — удаление одного и того же ресурса несколько раз даст один результат.
   - **PATCH**: Обновляет часть ресурса на сервере, отличие от `PUT` в том, что обновляются не все данные, а только конкретные поля.

2. **Порядок реализации добавления данных в веб-приложение:**
   - Создание **HTML-формы** для сбора данных от пользователя (например, имя, группа).
   - Настройка маршрута в **контроллере** для обработки данных, отправленных через форму (используя аннотацию `@PostMapping`).
   - Обработка данных в контроллере и передача их в **сервисный слой**.
   - В сервисном слое выполняется логика сохранения данных в базу через **репозиторий**.
   - По завершении, можно сделать редирект на другую страницу или отобразить результат выполнения.

3. **Механизм работы Spring MVC при добавлении данных в веб-приложение:**
   - **Клиент** отправляет запрос (обычно через форму) с данными на сервер (метод `POST`).
   - Запрос попадает в **контроллер**, где он обрабатывается методом, отмеченным аннотацией `@PostMapping`.
   - Контроллер передает данные в **сервисный слой** для обработки бизнес-логики (например, проверка валидности, преобразование данных).
   - Сервисный слой взаимодействует с **репозиторием** для сохранения данных в базу данных.
   - После успешного выполнения операции, контроллер может вернуть пользователю страницу с подтверждением или перенаправить его на другую страницу с помощью `redirect`.

4. **Для чего используется класс с аннотацией `@Service`:**
   - Аннотация `@Service` используется для обозначения сервисного класса, в котором реализуется бизнес-логика приложения.
   - Она позволяет Spring автоматически регистрировать этот класс как **бин**, чтобы он мог использоваться в других компонентах, таких как контроллеры.
   - В этом классе происходит обработка данных, их валидация, а также взаимодействие с репозиториями для работы с базой данных.

1. В чем необходимость источника данных?
2. Какие шаги нужны для подключения БД к веб-приложению ?
3. Какие функции у репозитария?
4. Какие операции и в какой последовательности
ВыПоЛНЯеТ
Jdbc Template?
5. Какая связь между моделью и таблицей БД?


1. **Необходимость источника данных:**
   Источник данных (DataSource) необходим для обеспечения доступа к базе данных из веб-приложения. Он управляет соединениями с базой данных, выступая в качестве интерфейса между приложением и базой. Это позволяет организовать выполнение запросов к базе данных (например, для получения, добавления или изменения данных) и поддерживать работу приложения с различными БД без изменения кода.

2. **Шаги для подключения БД к веб-приложению:**
   - **Добавление зависимостей** для работы с выбранной БД (например, Spring Data JPA и драйвера для конкретной базы данных).
   - **Конфигурация источника данных** в `application.properties` или `application.yml`, где указываются параметры подключения (URL базы, имя пользователя, пароль, драйвер).
   - **Создание сущностей (Entity)**, которые будут отображаться в таблицы базы данных.
   - **Создание репозиториев (Repository)** для взаимодействия с таблицами базы.
   - **Настройка транзакционности** и других параметров для обеспечения корректной работы с базой данных.

3. **Функции репозитория:**
   - Репозиторий предоставляет абстракцию для работы с базой данных и позволяет выполнять CRUD-операции (создание, чтение, обновление, удаление) без написания SQL-запросов.
   - Репозитории в Spring Data JPA автоматически создают методы для выполнения операций на основе имен методов (например, `findById`, `save`, `delete`).
   - Репозиторий позволяет делать сложные запросы с помощью методов, а также писать собственные SQL-запросы с помощью аннотации `@Query`.

4. **Операции JdbcTemplate и их последовательность:**
   - **Создание подключения к БД**: JdbcTemplate использует DataSource для управления соединениями с базой данных.
   - **Отправка SQL-запросов**: Метод `query` используется для выполнения SQL-запросов, которые возвращают данные. Для операций вставки, обновления или удаления используется метод `update`.
   - **Обработка результатов**: JdbcTemplate возвращает результат выполнения запроса в виде списка объектов (или одного объекта) с помощью метода `queryForObject`.
   - **Маппинг данных**: Полученные результаты преобразуются в объекты Java с помощью RowMapper или BeanPropertyRowMapper.

   Последовательность выполнения:
   - Инициализация шаблона с DataSource.
   - Выполнение SQL-запроса.
   - Получение результата (если нужно) и его маппинг в Java объекты.

5. **Связь между моделью и таблицей БД:**
   - Модель (Entity) в приложении отображается на таблицу базы данных через аннотации. Например, аннотация `@Entity` говорит, что данный класс соответствует таблице в БД, а `@Table` позволяет задать конкретное имя таблицы.
   - Поля модели соответствуют столбцам в таблице. Аннотации типа `@Column` и `@Id` помогают связать свойства класса с колонками таблицы.
   - Благодаря такой связи, с использованием JPA (Java Persistence API) можно сохранять, обновлять, удалять и загружать данные из БД, оперируя только объектами моделей в коде, не касаясь непосредственно SQL-запросов.
