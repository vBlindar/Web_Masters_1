1. Опишите общую схему работы веб--приложения.
2. Опишите работу архитектуры Spring MVC.
3. Для чего предназначена карта обработчиков?
4. Что прописывается в адресной строке браузера? И как это взаимо-
связано с контроллером?
5. Для чего предназначен Tomcat?
6. Какие типы архитектур веб-приложений существуют?
7. Что такое запрос клиента? И как он пишется веб-приложении?
8. Функции Арбитра представлений?
9. Что содержит в себе карта обработчиков?
10. Для чего предназначен диспетчер сервлетов?
11. Какие файлы содержит в себе новый Spring Boot-проект?
12. Как связаны оператор return метода из контроллера и HTML-стра-
ница?
13. Что такое автоматическая конфигурация по соглашению на основе зависимостей?
14. Что мы должны прописать внутри контроллера?
15. @RequestMapping("/home"), @GetMapping("/")- для чего мы указываем эти аннотации?


1. **Общая схема работы веб-приложения**:
   Веб-приложение получает запросы от клиента через браузер или другую систему, обрабатывает их на сервере и отправляет ответ в виде HTML, JSON, XML или другого формата. Браузер отображает полученный результат пользователю. Это включает следующие шаги: запрос клиента, обработка запроса сервером, выполнение бизнес-логики, взаимодействие с базой данных, формирование ответа и отправка его обратно клиенту.

2. **Работа архитектуры Spring MVC**:
   Spring MVC (Model-View-Controller) разделяет приложение на три слоя:
   - **Model** — отвечает за данные и бизнес-логику.
   - **View** — отвечает за отображение данных пользователю.
   - **Controller** — принимает запросы от клиента, обрабатывает их и передает нужные данные в модель и вид.
   Контроллеры связывают модель с представлением и отвечают за обработку запросов.

3. **Для чего предназначена карта обработчиков**:
   Карта обработчиков (handler mapping) определяет, какой контроллер должен обработать определенный запрос на основе URL-адреса. Это механизм маршрутизации запросов в Spring MVC.

4. **Что прописывается в адресной строке браузера? И как это связано с контроллером?**:
   В адресной строке браузера прописывается URL, который указывает на конкретный маршрут или ресурс. В Spring MVC этот URL связывается с методом контроллера через аннотации, такие как `@RequestMapping` или `@GetMapping`, которые определяют, какой метод обработает запрос по этому URL.

5. **Для чего предназначен Tomcat?**:
   Tomcat — это веб-сервер и контейнер сервлетов, который используется для запуска веб-приложений Java. Он обрабатывает HTTP-запросы и ответы, управляет сервлетами и динамическим контентом, таким как JSP.

6. **Какие типы архитектур веб-приложений существуют?**:
   Существуют разные типы архитектур:
   - **Монолитная** — все компоненты (база данных, серверная часть, логика) находятся в одном приложении.
   - **Микросервисная** — приложение разделено на независимые сервисы, каждый из которых выполняет свою задачу.
   - **Клиент-серверная** — клиент (обычно фронтенд) запрашивает данные у сервера, который обрабатывает запросы и возвращает данные.

7. **Что такое запрос клиента? И как он пишется в веб-приложении?**:
   Запрос клиента — это HTTP-запрос (GET, POST, PUT, DELETE и т.д.), который отправляется на сервер. В веб-приложении он обычно отправляется через браузер или другую систему (например, с помощью JavaScript). Запросы обрабатываются контроллерами, которые принимают и интерпретируют их.

8. **Функции Арбитра представлений (View Resolver)**:
   View Resolver отвечает за выбор и рендеринг представления (HTML, JSP, Thymeleaf и т.д.), которое будет отправлено клиенту в ответ на запрос. Он маппит логические имена представлений на физические файлы.

9. **Что содержит в себе карта обработчиков?**:
   Карта обработчиков содержит сопоставления между URL-запросами и методами контроллеров, которые должны их обработать.

10. **Для чего предназначен диспетчер сервлетов (DispatcherServlet)?**:
    DispatcherServlet — это основной компонент Spring MVC, который обрабатывает все входящие HTTP-запросы. Он управляет маршрутизацией запросов к соответствующим контроллерам и возвращает ответы клиенту.

11. **Какие файлы содержит в себе новый Spring Boot-проект?**:
    Новый проект Spring Boot обычно содержит:
    - `Application.java` — главный класс с аннотацией `@SpringBootApplication`, который запускает приложение.
    - Папку `resources`, где хранятся статические ресурсы и шаблоны представлений.
    - Файл `application.properties` или `application.yml` для настройки приложения.
    - Классы и пакеты для контроллеров, моделей, сервисов и репозиториев.

12. **Как связаны оператор `return` метода из контроллера и HTML-страница?**:
    Метод контроллера возвращает строку с именем представления (HTML-страницы), которую должен отобразить клиент. Эта строка передается в `View Resolver`, который отображает соответствующую HTML-страницу.

13. **Что такое автоматическая конфигурация по соглашению на основе зависимостей (Convention-based auto-configuration)?**:
    Spring Boot автоматически конфигурирует приложение на основе добавленных зависимостей и стандартных соглашений. Это позволяет разработчику не настраивать конфигурацию вручную, если используются стандартные компоненты.

14. **Что мы должны прописать внутри контроллера?**:
    В контроллере прописываются методы, которые будут обрабатывать HTTP-запросы. Эти методы должны быть аннотированы, например, с помощью `@RequestMapping`, `@GetMapping` или `@PostMapping`. Внутри методов можно вызывать бизнес-логику и возвращать представления.

15. **@RequestMapping("/home"), @GetMapping("/") — для чего мы указываем эти аннотации?**:
    Эти аннотации связывают HTTP-запросы с методами контроллеров. `@RequestMapping` используется для указания, какой URL должен быть обработан методом, а `@GetMapping` — для обработки GET-запросов на указанный URL.

